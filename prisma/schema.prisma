// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Phase1のレッスン
model Phase1Lesson {
  id         Int        @id @default(autoincrement())
  chapter    Int
  title      String
  slug       String     @unique
  content    String
  videoId    String?
  videoTitle String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  questions  Phase1Question[]
  progress   Phase1Progress[]
}

// Phase2のレッスン
model Phase2Lesson {
  id         Int        @id @default(autoincrement())
  chapter    Int
  title      String
  slug       String     @unique
  content    String
  videoId    String?
  videoTitle String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  questions  Phase2Question[]
  progress   Phase2Progress[]
}

// Phase3のレッスン
model Phase3Lesson {
  id         Int        @id @default(autoincrement())
  chapter    Int
  title      String
  slug       String     @unique
  content    String
  videoId    String?
  videoTitle String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  questions  Phase3Question[]
  progress   Phase3Progress[]
}


// Phase1の問題
model Phase1Question {
  id               Int               @id @default(autoincrement())
  text             String
  lessonId         Int
  lesson           Phase1Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  options          Phase1Option[]
  quizAttempts     Phase1QuizAttempt[]
  clearedQuestions Phase1ClearedQuestion[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

// Phase2の問題
model Phase2Question {
  id               Int               @id @default(autoincrement())
  text             String
  lessonId         Int
  lesson           Phase2Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  options          Phase2Option[]
  quizAttempts     Phase2QuizAttempt[]
  clearedQuestions Phase2ClearedQuestion[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

// Phase3の問題
model Phase3Question {
  id               Int               @id @default(autoincrement())
  text             String
  lessonId         Int
  lesson           Phase3Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  options          Phase3Option[]
  quizAttempts     Phase3QuizAttempt[]
  clearedQuestions Phase3ClearedQuestion[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}


// Phase1の選択肢
model Phase1Option {
  id         Int           @id @default(autoincrement())
  text       String
  isCorrect  Boolean
  questionId Int
  question   Phase1Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts   Phase1QuizAttempt[]
}

// Phase2の選択肢
model Phase2Option {
  id         Int           @id @default(autoincrement())
  text       String
  isCorrect  Boolean
  questionId Int
  question   Phase2Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts   Phase2QuizAttempt[]
}

// Phase3の選択肢
model Phase3Option {
  id         Int           @id @default(autoincrement())
  text       String
  isCorrect  Boolean
  questionId Int
  question   Phase3Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts   Phase3QuizAttempt[]
}


// Phase1のクイズ試行
model Phase1QuizAttempt {
  id               Int      @id @default(autoincrement())
  clerkUserId      String?
  sessionId        String?
  questionId       Int
  question         Phase1Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId Int?
  selectedOption   Phase1Option?  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  isCorrect        Boolean
  submittedAt      DateTime @default(now())
}

// Phase2のクイズ試行
model Phase2QuizAttempt {
  id               Int      @id @default(autoincrement())
  clerkUserId      String?
  sessionId        String?
  questionId       Int
  question         Phase2Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId Int?
  selectedOption   Phase2Option?  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  isCorrect        Boolean
  submittedAt      DateTime @default(now())
}

// Phase3のクイズ試行
model Phase3QuizAttempt {
  id               Int      @id @default(autoincrement())
  clerkUserId      String?
  sessionId        String?
  questionId       Int
  question         Phase3Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId Int?
  selectedOption   Phase3Option?  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  isCorrect        Boolean
  submittedAt      DateTime @default(now())
}


model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  password         String
  name             String?
  clerkId          String?        @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  subscriptions    Subscription[]
  
  // Phase別の進捗
  phase1Progress   Phase1Progress[]
  phase2Progress   Phase2Progress[]
  phase3Progress   Phase3Progress[]
  
  // Phase別のクリア済み問題
  phase1ClearedQuestions Phase1ClearedQuestion[]
  phase2ClearedQuestions Phase2ClearedQuestion[]
  phase3ClearedQuestions Phase3ClearedQuestion[]
  
}

// Phase1の進捗
model Phase1Progress {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId   Int
  lesson     Phase1Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed  Boolean  @default(false)
  completedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([userId, lessonId])
}

// Phase2の進捗
model Phase2Progress {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId   Int
  lesson     Phase2Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed  Boolean  @default(false)
  completedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([userId, lessonId])
}

// Phase3の進捗
model Phase3Progress {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId   Int
  lesson     Phase3Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed  Boolean  @default(false)
  completedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([userId, lessonId])
}

// Phase1のクリア済み問題
model Phase1ClearedQuestion {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId Int
  question   Phase1Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  clearedAt  DateTime @default(now())
  
  @@unique([userId, questionId])
}

// Phase2のクリア済み問題
model Phase2ClearedQuestion {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId Int
  question   Phase2Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  clearedAt  DateTime @default(now())
  
  @@unique([userId, questionId])
}

// Phase3のクリア済み問題
model Phase3ClearedQuestion {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId Int
  question   Phase3Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  clearedAt  DateTime @default(now())
  
  @@unique([userId, questionId])
}


model Subscription {
  id                   Int      @id @default(autoincrement())
  userId               Int
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId     String   @unique
  stripeSubscriptionId String   @unique
  status               String // active, canceled, past_due, etc.
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

// 電子公告
model ElectronicNotice {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  type        String   // important, financial, business, legal, other
  publishedAt DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  attachments ElectronicNoticeAttachment[]
}

// 電子公告の添付ファイル
model ElectronicNoticeAttachment {
  id        Int              @id @default(autoincrement())
  noticeId  Int
  notice    ElectronicNotice @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  name      String
  url       String
  size      String
  createdAt DateTime         @default(now())
}
