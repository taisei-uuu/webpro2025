<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>株式投資学習ロードマップ</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>

    <header class="site-header">
        <div class="container">
            <div class="header-content">
                <div class="header-left">
                    <h1><a href="/" class="home-link">株式投資学習ロードマップ</a></h1>
                    <p>0から始める株式投資の学び方</p>
                </div>
                <div class="header-right">
                    <% if (user) { %>
                        <div class="user-info">
                            <span>こんにちは、<%= user.name || user.email %>さん</span>
                            <a href="/logout" class="btn btn-outline">ログアウト</a>
                        </div>
                    <% } else { %>
                        <div class="auth-links">
                            <a href="/login" class="btn btn-primary">ログイン</a>
                            <a href="/signup" class="btn btn-outline">サインアップ</a>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </header>

    <main class="site-main">
        <div class="container">
            <div class="search-container">
                <form action="/search" method="GET" class="search-form">
                    <input type="search" name="q" class="search-input" placeholder="キーワードで検索 (例: NISA, 分析)">
                    <button type="button" class="btn search-btn" id="search-button">検索</button>
                </form>
            </div>

            <!-- 学習進捗ステッパー -->
            <div class="stepper">
                <% chapters.forEach((chapter, index) => { %>
                    <div class="stepper-item" data-chapter="<%= index %>">
                        <div class="stepper-indicator"><%= index + 1 %></div>
                        <div class="stepper-title">Stage<%= chapter.chapter %></div>
                        <div class="stepper-description"><%= chapter.title %></div>
                    </div>
                <% }); %>
            </div>

            <div class="admin-link-container">
                <a href="/admin/lessons/new" class="btn">＋ 新規レッスンを作成する</a>
            </div>
            <% chapters.forEach((chapter, index) => { %>
                <section class="chapter">
                    <div class="chapter-header">
                        <div class="chapter-title-container">
                            <button class="chapter-toggle" data-chapter="<%= index %>" aria-expanded="false">
                                <h2>Stage<%= chapter.chapter %>: <%= chapter.title %></h2>
                            </button>
                        </div>
                        <% if (chapter.totalQuestions > 0) { %>
                            <div class="progress-container">
                                <div class="progress-bar" style="width: <%= chapter.progressPercentage %>%;"></div>
                                <span class="progress-text"><%= chapter.clearedQuestions %> / <%= chapter.totalQuestions %> 問クリア</span>
                            </div>
                        <% } %>
                    </div>
                    <div class="chapter-content" id="chapter-<%= index %>" style="display: none;">
                        <ul class="lesson-list">
                            <% chapter.lessons.forEach(lesson => { %>
                                <li><a href="/lessons/<%= lesson.id %>"><%= lesson.title %></a></li>
                            <% }); %>
                        </ul>
                    </div>
                </section>
            <% }); %>
        </div>
    </main>

    <footer class="site-footer">
        <div class="container">
            <p>&copy; 2024 株式投資ロードマップ. All Rights Reserved.</p>
        </div>
    </footer>

    <%- include('_chatbot') %>
    <script src="/chatbot.js"></script>
    <script>
        // ドロップダウン機能と検索機能のJavaScript
        document.addEventListener('DOMContentLoaded', function() {
            // ドロップダウン機能
            const chapterToggles = document.querySelectorAll('.chapter-toggle');
            
            chapterToggles.forEach(toggle => {
                toggle.addEventListener('click', function() {
                    const chapterIndex = this.getAttribute('data-chapter');
                    const chapterContent = document.getElementById(`chapter-${chapterIndex}`);
                    const isExpanded = this.getAttribute('aria-expanded') === 'true';
                    
                    if (isExpanded) {
                        // 閉じる
                        chapterContent.style.display = 'none';
                        this.setAttribute('aria-expanded', 'false');
                    } else {
                        // 開く
                        chapterContent.style.display = 'block';
                        this.setAttribute('aria-expanded', 'true');
                    }
                });
            });

            // 検索機能の改善
            const searchForm = document.querySelector('.search-form');
            const searchBtn = document.getElementById('search-button');
            const searchInput = document.querySelector('.search-input');

            console.log('Search elements found:', { searchForm, searchBtn, searchInput });

            // 検索ボタンのクリックイベント
            if (searchBtn) {
                searchBtn.addEventListener('click', function(e) {
                    console.log('Search button clicked');
                    e.preventDefault();
                    e.stopPropagation();
                    const query = searchInput.value.trim();
                    console.log('Search query:', query);
                    if (query) {
                        window.location.href = `/search?q=${encodeURIComponent(query)}`;
                    }
                });
            }

            // Enterキーでの検索（既存の動作を保持）
            if (searchForm) {
                searchForm.addEventListener('submit', function(e) {
                    console.log('Search form submitted');
                    e.preventDefault();
                    const query = searchInput.value.trim();
                    console.log('Search query:', query);
                    if (query) {
                        window.location.href = `/search?q=${encodeURIComponent(query)}`;
                    }
                });
            }

            // ステッパーの状態更新
            function updateStepperProgress() {
                const stepperItems = document.querySelectorAll('.stepper-item');
                const chapterElements = document.querySelectorAll('.chapter');
                let completedCount = 0;
                
                // 完了した章の数をカウント
                chapterElements.forEach((chapter, index) => {
                    const progressText = chapter.querySelector('.progress-text');
                    if (progressText) {
                        const match = progressText.textContent.match(/(\d+) \/ (\d+) 問クリア/);
                        if (match) {
                            const clearedQuestions = parseInt(match[1]);
                            const totalQuestions = parseInt(match[2]);
                            if (totalQuestions > 0 && clearedQuestions === totalQuestions) {
                                completedCount++;
                            }
                        }
                    }
                });
                
                console.log('Completed chapters:', completedCount);
                
                // ステッパーの状態を更新（データ属性を使用）
                stepperItems.forEach((item) => {
                    const chapterIndex = parseInt(item.getAttribute('data-chapter'));
                    item.classList.remove('active', 'completed');
                    
                    if (chapterIndex < completedCount) {
                        item.classList.add('completed');
                        console.log(`Chapter ${chapterIndex + 1}: completed`);
                    } else if (chapterIndex === completedCount) {
                        item.classList.add('active');
                        console.log(`Chapter ${chapterIndex + 1}: active`);
                    } else {
                        console.log(`Chapter ${chapterIndex + 1}: inactive`);
                    }
                });
            }

            // 初期化時にステッパーの状態を更新
            updateStepperProgress();

            // デバッグ用：検索ボタンが存在するか確認
            setTimeout(() => {
                console.log('Search button element:', document.querySelector('.search-btn'));
                console.log('Search button text:', document.querySelector('.search-btn')?.textContent);
                console.log('Search button visible:', document.querySelector('.search-btn')?.offsetParent !== null);
            }, 1000);
        });
    </script>
</body>
</html>