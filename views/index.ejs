<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock with - 株式投資学習ロードマップ</title>
    <link rel="icon" type="image/png" href="/logo.png">
    <link rel="stylesheet" href="/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- Clerk認証スクリプト -->
    <script>
        window.Clerk = window.Clerk || {};
        window.Clerk.publishableKey = '<%= publishableKey || "" %>';
    </script>
    <% if (publishableKey) { %>
    <script async crossorigin="anonymous" data-clerk-publishable-key="<%= publishableKey %>" src="https://<%= publishableKey.split('_')[1] %>.clerk.accounts.dev/npm/@clerk/clerk-js@latest/dist/clerk.browser.js"></script>
    <% } %>
</head>
<body>

    <style>
        /* General body style for demonstration */
        body {
            margin: 0;
            font-family: sans-serif;
        }

        .container {
            width: 100%;
            max-width: 1200px; /* Or your desired max width */
            margin: 0 auto;
            box-sizing: border-box; /* Ensures padding doesn't add to width */
        }

        /* --- ここからがヘッダーのスタイルです --- */

        .site-header {
            padding: 10px 0;
            min-height: auto;
            background-color: white; /* 白い背景を追加 */
            border-bottom: 1px solid #f0f0f0; /* Optional: adds a nice separator */
        }

        .header-content {
            display: flex;
            justify-content: space-between; /* 左右に配置 */
            align-items: center;
            flex-wrap: nowrap; 
            padding: 0 15px;
            position: relative; /* 相対位置指定で左右の要素を絶対配置 */
        }

        /* 左側のロゴと商号 */
        .header-logo {
            display: flex;
            align-items: center;
            text-decoration: none;
            color: #000000;
            font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
            font-weight: 600;
            font-size: 1.5rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            line-height: 1;
        }

        .header-logo img {
            height: 40px;
            margin-right: 8px;
        }

        .header-logo .brand-with {
            font-weight: 400;
            color: #1e40af;
        }
        
        /* 右側のアクションボタンのコンテナ */
        .header-actions {
            display: flex;
            align-items: center;
            gap: 10px;
        }


        #login-btn {
            border: none;
            background: none;
            padding: 8px 16px;
            font-size: 1rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            color: #000000;
            text-decoration: none;
        }

        #login-btn:hover {
            color: #1e40af;
        }
        
        .user-greeting {
            margin-right: 10px;
            font-size: 0.9rem;
            color: #666;
        }

        /* --- レスポンシブ対応 --- */
        
        /* 768px以下の画面サイズ */
        @media (max-width: 768px) {
            .header-logo {
                font-size: 1.2rem;
            }
            .header-logo img {
                height: 35px;
            }
            #login-btn {
                padding: 6px 12px;
                font-size: 0.9rem;
            }
        }

        /* 480px以下の画面サイズ */
        @media (max-width: 480px) {
            .header-content {
                padding: 0 10px; /* さらに狭い画面ではパディングを少し減らす */
            }
            .header-logo {
                font-size: 1.1rem;
            }
            .header-logo img {
                height: 30px;
            }
            #login-btn {
                padding: 6px 8px;
                font-size: 0.8rem;
            }
        }

        /* Phase別進捗表示のスタイル */
        .phase-progress-container {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            border-radius: 15px;
            padding: 1.5rem;
            margin: 2rem 0;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid #e2e8f0;
        }

        .phase-progress-title {
            color: #1e40af;
            font-weight: 700;
            font-size: 1.3rem;
            margin-bottom: 1rem;
            text-align: center;
        }

        .phase-progress-title i {
            margin-right: 0.5rem;
        }

        .phase-stepper {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 1.5rem;
        }

        .phase-item {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            position: relative;
            padding: 0.75rem;
            border-radius: 10px;
            transition: all 0.3s ease;
            text-decoration: none;
            color: inherit;
            cursor: pointer;
        }

        .phase-item:hover {
            text-decoration: none;
            color: inherit;
        }

        .phase-item.active {
            background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
            color: white;
            transform: scale(1.05);
            box-shadow: 0 8px 25px rgba(30, 64, 175, 0.3);
        }

        .phase-item.locked {
            background: #f1f5f9;
            color: #64748b;
            opacity: 0.6;
        }

        .phase-item.completed {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }

        .phase-indicator {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.3rem;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
            overflow: hidden;
        }

        .phase-icon {
            position: relative;
            z-index: 2;
            color: inherit;
        }

        .phase-progress-fill {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            background: rgba(255, 255, 255, 0.3);
            transition: height 0.3s ease;
            border-radius: 0 0 50% 50%;
        }

        .phase-item.active .phase-indicator {
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .phase-item.locked .phase-indicator {
            background: #e2e8f0;
            border: 2px solid #cbd5e1;
        }

        .phase-item.completed .phase-indicator {
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .phase-name {
            font-size: 0.9rem;
            font-weight: 600;
            margin: 0;
        }

        /* レスポンシブ対応 */
        @media (max-width: 768px) {
            .phase-stepper {
                gap: 1rem;
            }

            .phase-item {
                padding: 0.5rem;
            }

            .phase-indicator {
                width: 45px;
                height: 45px;
                font-size: 1.2rem;
            }

            .phase-name {
                font-size: 0.8rem;
            }
        }

        @media (max-width: 480px) {
            .phase-progress-container {
                padding: 1rem;
                margin: 1rem 0;
            }

            .phase-progress-title {
                font-size: 1.1rem;
                margin-bottom: 0.75rem;
            }

            .phase-stepper {
                gap: 0.5rem;
            }

            .phase-item {
                padding: 0.4rem;
            }

            .phase-indicator {
                width: 40px;
                height: 40px;
                font-size: 1.1rem;
            }

            .phase-name {
                font-size: 0.75rem;
            }
        }
    </style>

    <header class="site-header">
        <div class="container">
            <!-- 修正後のHTML構造 -->
            <div class="header-content">
                <!-- 左側のロゴと商号 -->
                <a href="/learning" class="header-logo">
                    <img src="/logo.png" alt="Stock with" height="40">
                    STOCK&nbsp;<span class="brand-with">WITH</span>
                </a>
                
                <!-- 右側のアクションボタン -->
                <div class="header-actions">
                    <% if (user) { %>
                        <!-- ログイン済みの場合 -->
                        <button id="login-btn" class="btn btn-outline" onclick="handleUserProfile()">
                            <i class="fas fa-user"></i>
                        </button>
                    <% } else { %>
                        <!-- 未ログインの場合 -->
                        <span id="user-greeting" style="display: none;"></span>
                        <button id="logout-btn" class="btn btn-outline" onclick="window.Clerk.signOut()" style="display: none;">
                            <i class="fas fa-sign-out-alt"></i>
                        </button>
                        <button id="login-btn" class="btn btn-outline" onclick="window.Clerk.openSignIn()">
                            <i class="fas fa-right-to-bracket"></i>
                            ログイン
                        </button>
                    <% } %>
                </div>
            </div>
        </div>
    </header>

    <main class="site-main">
        <div class="container">
            <% if (isGuest) { %>
            <!-- ゲストモード通知 -->
            <div class="guest-notice">
                <i class="fas fa-info-circle"></i>
                <div>
                    <strong>ゲストモードで学習中</strong><br>
                    学習進捗は保存されません。進捗を保存するには<a href="#" onclick="window.Clerk.openSignIn()">ログイン</a>または<a href="#" onclick="window.Clerk.openSignUp()">新規登録</a>してください。
                </div>
            </div>
            <% } %>

            <!-- Phase別進捗表示 -->
            <div class="phase-progress-container">
                <h3 class="phase-progress-title">
                    <i class="fas fa-graduation-cap"></i>学習フェーズ進捗
                </h3>
                <div class="phase-stepper">
                    <a href="/learning" class="phase-item active" data-phase="1">
                        <div class="phase-indicator">
                            <div class="phase-icon">
                                <i class="fas fa-seedling"></i>
                            </div>
                            <div class="phase-progress-fill" id="phase1-progress-fill"></div>
                        </div>
                        <div class="phase-name">Phase 1</div>
                    </a>
                    
                    <a href="/phase2" class="phase-item locked" data-phase="2">
                        <div class="phase-indicator">
                            <div class="phase-icon">
                                <i class="fas fa-lock"></i>
                            </div>
                            <div class="phase-progress-fill" style="height: 0%"></div>
                        </div>
                        <div class="phase-name">Phase 2</div>
                    </a>
                    
                    <a href="/phase3" class="phase-item locked" data-phase="3">
                        <div class="phase-indicator">
                            <div class="phase-icon">
                                <i class="fas fa-lock"></i>
                            </div>
                            <div class="phase-progress-fill" style="height: 0%"></div>
                        </div>
                        <div class="phase-name">Phase 3</div>
                    </a>
                </div>
            </div>
            
            <!-- 検索機能 -->
            <!-- <div id="search-container">
                <div id="search-indicator" class="search-indicator">
                    <div class="search-icon">🔍</div>
                    <div class="search-text">検索</div>
                </div>
                
                <div class="search-form-container hidden">
                    <form action="/search" method="GET" class="search-form">
                        <input type="search" name="q" class="search-input" placeholder="キーワードで検索 (例: NISA, 分析)">
                        <button type="button" class="btn search-btn" id="search-button">検索</button>
                    </form>
                </div>
            </div> -->

            <!-- 学習進捗ステッパー -->
            <!-- <div id="stepper-container">
                <div id="progress-indicator" class="progress-indicator">
                    <div class="progress-icon">👣</div>
                    <div class="progress-text">進捗</div>
                </div>
                
                <div class="stepper hidden">
                    <% chapters.forEach((chapter, index) => { %>
                        <div class="stepper-item" data-chapter="<%= index %>">
                            <div class="stepper-indicator clickable" data-chapter="<%= index %>"><%= index + 1 %></div>
                            <div class="stepper-title">Stage<%= chapter.chapter %></div>
                            <div class="stepper-description"><%= chapter.title %></div>
                        </div>
                    <% }); %>
                </div>
            </div> -->

            <% chapters.forEach((chapter, index) => { %>
                <section class="chapter" data-chapter="<%= index %>">
                    <div class="chapter-header">
                        <div class="chapter-title-container">
                            <button class="chapter-toggle" data-chapter="<%= index %>" aria-expanded="<%= index === 0 ? 'true' : 'false' %>">
                                <h2>Stage<%= chapter.chapter %>: <%= chapter.title %></h2>
                            </button>
                        </div>
                        <% if (chapter.totalQuestions > 0) { %>
                            <div class="progress-container">
                                <div class="progress-bar" data-width="<%= Math.round(chapter.progressPercentage) %>"></div>
                                <span class="progress-text"><%= chapter.clearedQuestions %> / <%= chapter.totalQuestions %> 問クリア</span>
                            </div>
                        <% } %>
                    </div>
                    <div class="chapter-content" id="chapter-<%= index %>" data-visible="<%= index === 0 ? 'true' : 'false' %>">
                        <ul class="lesson-list">
                            <% chapter.lessons.forEach(lesson => { %>
                                <li><a href="/lessons/<%= lesson.slug %>"><%= lesson.title %></a></li>
                            <% }); %>
                        </ul>
                    </div>
                </section>
            <% }); %>
        </div>
    </main>

    <!-- <div class="admin-link-container" style="text-align: center; margin: 20px 0;">
        <a href="/admin/lessons/new" class="btn">＋ 新規レッスンを作成する</a>
    </div> -->

    <footer class="site-footer">
        <div class="container">
            <p>&copy; 2024 Stock with株式会社. All Rights Reserved.</p>
        </div>
    </footer>

    <!-- チャットボット機能（一時的にコメントアウト） -->
    <!-- <%- include('_chatbot') %> -->
    <!-- <script src="/chatbot.js"></script> -->
    <script>
        // Clerkの初期化（簡素化版）
        window.addEventListener('load', async () => {
            try {
                console.log('Clerk初期化を開始します...');
                console.log('Publishable key:', window.Clerk.publishableKey);
                
                // Clerkが利用可能かチェック
                if (window.Clerk && typeof window.Clerk.load === 'function') {
                    await window.Clerk.load();
                    console.log('Clerk loaded successfully');
                } else {
                    console.log('Clerkは既に初期化済みまたは利用できません');
                }
                
                console.log('Clerk object:', window.Clerk);
                console.log('Current user:', window.Clerk.user);
                
                updateAuthUI();
                
            } catch (error) {
                console.error('Error loading Clerk:', error);
                // エラーが発生してもページは継続
                console.log('Clerkの初期化に失敗しましたが、ページは継続します');
            }
        });
        
        // ユーザープロフィール処理関数
        function handleUserProfile() {
            console.log('ユーザープロフィールボタンがクリックされました');
            
            // サーバーサイドでユーザーがログインしているかチェック
            <% if (user) { %>
                console.log('サーバーサイドでユーザーがログイン済みです');
                // Clerkが利用可能かチェック
                if (window.Clerk && typeof window.Clerk.openUserProfile === 'function') {
                    try {
                        window.Clerk.openUserProfile();
                        console.log('プロフィール画面を開きました');
                    } catch (error) {
                        console.error('プロフィール画面を開く際にエラーが発生しました:', error);
                        alert('プロフィール画面を開けませんでした。');
                    }
                } else {
                    console.error('Clerkが利用できません');
                    alert('プロフィール機能が利用できません。');
                }
            <% } else { %>
                console.log('ユーザーがログインしていません');
                alert('ログインが必要です。');
            <% } %>
        }

        // 認証UIの更新関数（サーバーサイドで既に適切な状態が設定されているため、簡素化）
        function updateAuthUI() {
            const user = window.Clerk.user;
            const userGreeting = document.getElementById('user-greeting');
            const loginBtn = document.getElementById('login-btn');
            
            if (user) {
                // ログイン済みの場合
                if (userGreeting) userGreeting.style.display = 'none';
                if (loginBtn) {
                    loginBtn.innerHTML = '<i class="fas fa-user"></i>';
                    loginBtn.onclick = handleUserProfile;
                }
            } else {
                // 未ログインの場合
                if (userGreeting) userGreeting.style.display = 'none';
                if (loginBtn) {
                    loginBtn.innerHTML = '<i class="fas fa-right-to-bracket"></i> ログイン';
                    loginBtn.onclick = () => window.Clerk.openSignIn();
                }
            }
        }
        
        // ドロップダウン機能と検索機能のJavaScript
        document.addEventListener('DOMContentLoaded', function() {
            // プログレスバーの幅を設定
            document.querySelectorAll('.progress-bar').forEach(bar => {
                const width = bar.getAttribute('data-width');
                if (width) {
                    bar.style.width = width + '%';
                }
            });
            
            // チャプターコンテンツの表示状態を設定
            document.querySelectorAll('.chapter-content').forEach(content => {
                const visible = content.getAttribute('data-visible');
                if (visible === 'true') {
                    content.style.display = 'block';
                } else {
                    content.style.display = 'none';
                }
            });
            
            // ドロップダウン機能
            const chapterToggles = document.querySelectorAll('.chapter-toggle');
            
            chapterToggles.forEach(toggle => {
                toggle.addEventListener('click', function() {
                    console.log('Chapter toggle clicked!');
                    const chapterIndex = this.getAttribute('data-chapter');
                    const chapterContent = document.getElementById(`chapter-${chapterIndex}`);
                    const isExpanded = this.getAttribute('aria-expanded') === 'true';
                    
                    console.log('Chapter index:', chapterIndex);
                    console.log('Chapter content element:', chapterContent);
                    console.log('Is expanded:', isExpanded);
                    
                    if (isExpanded) {
                        // 閉じる
                        chapterContent.style.display = 'none';
                        this.setAttribute('aria-expanded', 'false');
                        console.log('Chapter closed');
                    } else {
                        // 開く
                        chapterContent.style.display = 'block';
                        this.setAttribute('aria-expanded', 'true');
                        console.log('Chapter opened');
                    }
                });
            });

            // 進捗アイコンのクリックイベント（Stepperの表示/非表示）
            // const progressIndicator = document.getElementById('progress-indicator');
            // const stepperContainer = document.getElementById('stepper-container');
            // const stepper = document.querySelector('.stepper');
            
            // progressIndicator.addEventListener('click', function() {
            //     console.log('Progress indicator clicked!');
                
            //     if (stepper.classList.contains('hidden')) {
            //         // Stepperを表示
            //         stepper.classList.remove('hidden');
            //         stepperContainer.classList.add('active');
            //         console.log('Stepper displayed');
            //     } else {
            //         // Stepperを非表示
            //         stepper.classList.add('hidden');
            //         stepperContainer.classList.remove('active');
            //         console.log('Stepper hidden');
            //     }
            // });
            
            // 検索アイコンのクリックイベント（検索フォームの表示/非表示）
            // const searchIndicator = document.getElementById('search-indicator');
            // const searchFormContainer = document.querySelector('.search-form-container');
            
            // searchIndicator.addEventListener('click', function() {
            //     console.log('Search indicator clicked!');
                
            //     if (searchFormContainer.classList.contains('hidden')) {
            //         // 検索フォームを表示
            //         searchFormContainer.classList.remove('hidden');
            //         console.log('Search form displayed');
            //     } else {
            //         // 検索フォームを非表示
            //         searchFormContainer.classList.add('hidden');
            //         console.log('Search form hidden');
            //     }
            // });
            
            // ステッパーのナビゲーション機能
            // const stepperIndicators = document.querySelectorAll('.stepper-indicator.clickable');
            
            // stepperIndicators.forEach(indicator => {
            //     indicator.addEventListener('click', function() {
            //         console.log('Stepper indicator clicked!');
            //         const chapterIndex = this.getAttribute('data-chapter');
            //         console.log('Chapter index:', chapterIndex);
                    
            //         const targetChapter = document.querySelector(`section.chapter[data-chapter="${chapterIndex}"]`);
            //         console.log('Target chapter found:', targetChapter);
                    
            //         if (targetChapter) {
            //             // 対応するChapterを開く
            //             const chapterToggle = targetChapter.querySelector('.chapter-toggle');
            //             const chapterContent = targetChapter.querySelector('.chapter-content');
                        
            //             if (chapterToggle && chapterContent) {
            //                 // Chapterが閉じている場合は開く
            //                 if (chapterContent.style.display === 'none') {
            //                     chapterContent.style.display = 'block';
            //                     chapterToggle.setAttribute('aria-expanded', 'true');
            //                     console.log('Chapter opened');
            //                 }
            //             }
                        
            //             // 画面中央にスクロール（より正確な位置計算）
            //             const targetRect = targetChapter.getBoundingClientRect();
            //             const windowHeight = window.innerHeight;
            //             const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            //             const targetTop = targetRect.top + scrollTop;
            //             const offset = (windowHeight - targetRect.height) / 2;
                        
            //             console.log('Scroll calculation:', {
            //                 targetRect: targetRect,
            //                 windowHeight: windowHeight,
            //                 scrollTop: scrollTop,
            //                 targetTop: targetTop,
            //                 offset: offset
            //             });
                        
            //             window.scrollTo({
            //                 top: targetTop - offset,
            //                 behavior: 'smooth'
            //             });
                        
            //             console.log('Scrolling to:', targetTop - offset);
            //         } else {
            //             console.log('Target chapter not found!');
            //         }
            //     });
            // });

            // 検索機能の改善
            // const searchForm = document.querySelector('.search-form');
            // const searchBtn = document.getElementById('search-button');
            // const searchInput = document.querySelector('.search-input');

            // console.log('Search elements found:', { searchForm, searchBtn, searchInput });

            // // 検索ボタンのクリックイベント
            // if (searchBtn) {
            //     searchBtn.addEventListener('click', function(e) {
            //         console.log('Search button clicked');
            //         e.preventDefault();
            //         e.stopPropagation();
            //         const query = searchInput.value.trim();
            //         console.log('Search query:', query);
            //         if (query) {
            //             window.location.href = `/search?q=${encodeURIComponent(query)}`;
            //         }
            //     });
            // }

            // // Enterキーでの検索（既存の動作を保持）
            // if (searchForm) {
            //     searchForm.addEventListener('submit', function(e) {
            //         console.log('Search form submitted');
            //         e.preventDefault();
            //         const query = searchInput.value.trim();
            //         console.log('Search query:', query);
            //         if (query) {
            //             window.location.href = `/search?q=${encodeURIComponent(query)}`;
            //         }
            //     });
            // }

            // ステッパーの状態更新
            // function updateStepperProgress() {
            //     const stepperItems = document.querySelectorAll('.stepper-item');
            //     const chapterElements = document.querySelectorAll('.chapter');
                
            //     // ステッパーの状態を更新（データ属性を使用）
            //     stepperItems.forEach((item) => {
            //         const chapterIndex = parseInt(item.getAttribute('data-chapter'));
            //         item.classList.remove('active', 'completed');
                    
            //         // 対応するChapterの進捗状況を確認
            //         const chapter = chapterElements[chapterIndex];
            //         if (chapter) {
            //             const progressText = chapter.querySelector('.progress-text');
            //             if (progressText) {
            //                 const match = progressText.textContent.match(/(\d+) \/ (\d+) 問クリア/);
            //                 if (match) {
            //                     const clearedQuestions = parseInt(match[1]);
            //                     const totalQuestions = parseInt(match[2]);
            //                     if (totalQuestions > 0 && clearedQuestions === totalQuestions) {
            //                         // 全問クリアした場合のみ青色（completed）で表示
            //                         item.classList.add('completed');
            //                         console.log(`Chapter ${chapterIndex + 1}: completed`);
            //                     } else {
            //                         // 未完了の場合はグレー（デフォルト）で表示
            //                         console.log(`Chapter ${chapterIndex + 1}: incomplete`);
            //                     }
            //                 } else {
            //                     // 進捗情報がない場合もグレー（デフォルト）で表示
            //                     console.log(`Chapter ${chapterIndex + 1}: no progress info`);
            //                 }
            //             } else {
            //                 // 進捗表示がない場合もグレー（デフォルト）で表示
            //                 console.log(`Chapter ${chapterIndex + 1}: no progress display`);
            //             }
            //         }
            //     });
                
            //     // 線の色を更新（両側のChapterアイコンが青の時のみ線を青くする）
            //     updateStepperLines();
            // }
            
            // // ステッパーの線の色を更新する関数
            // function updateStepperLines() {
            //     const stepperItems = document.querySelectorAll('.stepper-item');
                
            //     stepperItems.forEach((item, index) => {
            //         if (index < stepperItems.length - 1) { // 最後のアイテム以外
            //             const currentItem = item;
            //             const nextItem = stepperItems[index + 1];
                        
            //             // 両側のChapterアイコンが青（completed）の場合のみ線を青くする
            //             if (currentItem.classList.contains('completed') && nextItem.classList.contains('completed')) {
            //                 currentItem.style.setProperty('--line-color', 'var(--primary-color)');
            //             } else {
            //                 currentItem.style.setProperty('--line-color', 'var(--border-color)');
            //             }
            //         }
            //     });
            // }

            // // 初期化時にステッパーの状態を更新
            // updateStepperProgress();

            // Phase1の進捗を設定
            const phase1ProgressFill = document.getElementById('phase1-progress-fill');
            if (phase1ProgressFill) {
                phase1ProgressFill.style.height = '<%= phase1Progress %>%';
            }

            // // デバッグ用：検索ボタンが存在するか確認
            // setTimeout(() => {
            //     console.log('Search button element:', document.querySelector('.search-btn'));
            //     console.log('Search button text:', document.querySelector('.search-btn')?.textContent);
            //     console.log('Search button visible:', document.querySelector('.search-btn')?.offsetParent !== null);
            // }, 1000);
        });
    </script>
</body>
</html>